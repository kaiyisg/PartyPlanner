diff a/app/src/main/java/se/kth/csc/iprog/dinnerplanner/model/DinnerModel.java b/app/src/main/java/se/kth/csc/iprog/dinnerplanner/model/DinnerModel.java	(rejected hunks)
@@ -3,23 +3,16 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class DinnerModel {
-	
+public class DinnerModel implements IDinnerModel{
+
+	private int guests;
+	private Set<Dish> dishes = new HashSet<Dish>();
 
-	Set<Dish> dishes = new HashSet<Dish>();
-	
-	/**
-	 * TODO: For Lab2 you need to implement the IDinnerModel interface.
-	 * When you do this you will have all the needed fields and methods
-	 * for the dinner planner (number of guests, selected dishes, etc.). 
-	 */
-	
-	
 	/**
 	 * The constructor of the overall model. Set the default values here
 	 */
 	public DinnerModel(){
-		
+
 		//Adding some example data, you can add more
 		Dish dish1 = new Dish("French toast",Dish.STARTER,"toast.jpg","In a large mixing bowl, beat the eggs. Add the milk, brown sugar and nutmeg; stir well to combine. Soak bread slices in the egg mixture until saturated. Heat a lightly oiled griddle or frying pan over medium high heat. Brown slices on both sides, sprinkle with cinnamon and serve hot.");
 		Ingredient dish1ing1 = new Ingredient("eggs",0.5,"",1);
@@ -58,16 +51,16 @@
 		dish2.addIngredient(dish2ing10);
 		dish2.addIngredient(dish2ing11);
 		dishes.add(dish2);
-		
+
 	}
-	
+
 	/**
-	 * Returns the set of dishes of specific type. (1 = starter, 2 = main, 3 = desert).
+	 * Returns the set of dishes
 	 */
 	public Set<Dish> getDishes(){
 		return dishes;
 	}
-	
+
 	/**
 	 * Returns the set of dishes of specific type. (1 = starter, 2 = main, 3 = desert).
 	 */
